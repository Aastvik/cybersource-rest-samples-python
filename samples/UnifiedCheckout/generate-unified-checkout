from CyberSource import *
from pathlib import Path
import os
import json
from importlib.machinery import SourceFileLoader

config_file = os.path.join(os.getcwd(), "data", "Configuration.py")
configuration = SourceFileLoader("module.name", config_file).load_module()

# To delete None values in Input Request Json body
def del_none(d):
    for key, value in list(d.items()):
        if value is None:
            del d[key]
        elif isinstance(value, dict):
            del_none(value)
    return d

def generate_unified_checkout_capture_context():

    captureMandate = Upv1capturecontextsCaptureMandate(
        billing_type="FULL",
        request_email=True,
        request_phone=True,
        request_shipping=True,
        ship_to_countries=["US","GB"],
        show_accepted_network_icons=True
    )

    amountDetails = Upv1capturecontextsOrderInformationAmountDetails(
        total_amount="21.00",
        currency="USD"
    )
    orderInformation = Upv1capturecontextsOrderInformation(
        amount_details=amountDetails.__dict__
    )

    requestObj = GenerateUnifiedCheckoutCaptureContextRequest(
        target_origins = ["https://the-up-demo.appspot.com"],
        client_version = "0.15",
        allowed_card_networks = ["VISA","MASTERCARD","AMEX"],
        allowed_payment_types=["PANENTRY","SRC"],
        country="US",
        locale="en_US",
        capture_mandate=captureMandate.__dict__,
        order_information=orderInformation.__dict__
    )




    requestObj = del_none(requestObj.__dict__)
    requestObj = json.dumps(requestObj)


    try:
        config_obj = configuration.Configuration()
        client_config = config_obj.get_configuration()
        api_instance = UnifiedCheckoutCaptureContextApi(client_config)
        return_data, status, body = api_instance.generate_unified_checkout_capture_context(requestObj)

        print("\nAPI RESPONSE CODE : ", status)
        print("\nAPI RESPONSE BODY : ", body)

        write_log_audit(status)
        return return_data
    except Exception as e:
        write_log_audit(e.status if hasattr(e, 'status') else 999)
        print("\nException when calling TaxesApi->calculate_tax: %s\n" % e)

def write_log_audit(status):
    print(f"[Sample Code Testing] [{Path(__file__).stem}] {status}")

if __name__ == "__main__":
    generate_unified_checkout_capture_context()
